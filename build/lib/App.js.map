{"version":3,"sources":["../../src/lib/App.js"],"names":[],"mappings":"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","file":"lib/App.js","sourcesContent":["import { Session } from 'rqt'\nimport { extractXsrf } from '.'\n\n\n/**\n * @typedef {Object} Result\n * @property {boolean} __isError\n * @property {string} Message\n * @property {{ Message: String }[]} Errors\n * @property {strings[]} Warnings\n * @property {boolean} Success\n */\n\n/** @param {Result} res */\nconst checkError = (res) => {\n  if (res.__isError) {\n    const err = new Error(res.Message)\n    Object.assign(err, res)\n    throw err\n  }\n  if (!res.Success) {\n    const t = res.Errors.map(({ Message }) => Message).join(', ')\n    const r = new Error(t)\n    r.__type = res.__type\n    throw r\n  }\n}\n\nexport default class App {\n  /** @param {{cookies: *}} param */\n  constructor({\n    cookies,\n    host,\n    userAgent,\n    password, // needed for confirmations\n  }) {\n    const session = new Session({\n      host,\n      headers: {\n        'User-Agent': userAgent,\n      },\n    })\n    session.cookies = cookies\n    this._session = session\n    this.password = password\n  }\n  get session() {\n    return this._session\n  }\n  getToken(body) {\n    const token = extractXsrf(body)\n    return token\n  }\n  async test() {\n    const { statusCode } = await this.session.aqt('/', {\n      justHeaders: true,\n    })\n    const res = statusCode == 200\n    return res\n  }\n  async whitelistIP(\n    ipAddress,\n    name = `@rqt ${new Date().toLocaleString()}`.replace(/:/g, '-'),\n  ) {\n    const token = await this.requestToken(App.WHITELISTED_UPS)\n    const apiUrl = App.getApiUrl('AddIpAddress')\n    const data = {\n      accountPassword: this.password,\n      ipAddress,\n      name,\n    }\n    await this.request(apiUrl, token, data)\n  }\n  static get WHITELISTED_UPS() {\n    return '/settings/tools/apiaccess/whitelisted-ips'\n  }\n  async removeWhitelistedIP(name) {\n    const token = await this.requestToken(App.WHITELISTED_UPS)\n    const apiUrl = App.getApiUrl('RemoveIpAddresses')\n    await this.request(apiUrl, token, {\n      accountPassword: this.password,\n      names: [name],\n    })\n  }\n  static getApiUrl(page) {\n    return `/api/v1/ncpl/apiaccess/ui/${page}`\n  }\n  async requestToken(url) {\n    const body = await this.session.rqt(url)\n    const token = this.getToken(body)\n    return token\n  }\n  async getWhitelistedIPList() {\n    const token = await this.requestToken(App.WHITELISTED_UPS)\n    const apiUrl = App.getApiUrl('GetWhitelistedIpAddresses')\n    const { IpAddresses } = await this.request(apiUrl, token)\n    const res = IpAddresses.map(({ Name, IpAddress, ModifyDate }) => ({\n      Name,\n      IpAddress,\n      ModifyDate: new Date(`${ModifyDate}Z`),\n    }))\n    return res\n  }\n  async request(url, token, data) {\n    const res = await this.session.jqt(url, {\n      data,\n      headers: {\n        'x-ncpl-rcsrf': token,\n      },\n    })\n    checkError(res)\n    const { Data } = res\n    return Data\n  }\n}"]}